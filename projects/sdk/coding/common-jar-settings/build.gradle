import com.squareup.javapoet.FieldSpec
import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.TypeSpec

import javax.lang.model.element.Modifier

buildscript {
    repositories {
        if (!System.getenv().containsKey("DISABLE_TENCENT_MAVEN_MIRROR")) {
            maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
        } else {
            google()
            mavenCentral()
        }
    }
    dependencies {
        classpath "com.squareup:javapoet:$javapoet_version"
    }
}

apply plugin: 'java-gradle-plugin'

apply plugin: 'kotlin'

gradlePlugin {
    plugins {
        shadow {
            id = "com.tencent.shadow.internal.common-jar-settings"
            implementationClass = "com.tencent.shadow.coding.common_jar_settings.CommonJarSettingsPlugin"
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.tools.build:gradle:$build_gradle_version"
    implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation gradleTestKit()
}


java {
    sourceSets {
        main.java.srcDirs += 'build/generateCode'
    }
}

def generateCode = tasks.register('generateCode') {
    def androidJarPath = project(':get-android-jar').androidJarPath
    inputs.property('androidJarPath', androidJarPath)
    outputs.dir(layout.buildDirectory.dir('generateCode'))
            .withPropertyName('outputDir')
    doLast {
        def androidJarPathField
                = FieldSpec.builder(String, "ANDROID_JAR_PATH", Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)
                .initializer('$S', androidJarPath).build()

        def androidJarClass = TypeSpec.classBuilder("AndroidJar")
                .addModifiers(Modifier.PUBLIC, Modifier.FINAL)
                .addField(androidJarPathField).build()

        JavaFile.builder("com.tencent.shadow.coding.common_jar_settings", androidJarClass)
                .build().writeTo(new File(project.getBuildDir(), 'generateCode'))
    }
}

compileKotlin.dependsOn(generateCode)
