apply plugin: 'com.android.application'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION
    defaultConfig {
        applicationId project.TEST_HOST_APP_APPLICATION_ID
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME
        testInstrumentationRunner "com.tencent.shadow.test.CustomAndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/test-dynamic-manager/debug/')
            assets.srcDir('build/generated/assets/plugin-zip/debug/')
            assets.srcDir('build/generated/assets/plugin-reinstall-zip/debug/')
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    testOptions {
        animationsDisabled = true
    }
}

dependencies {
    implementation 'commons-io:commons-io:2.5'//example复制apk用的.
    implementation 'org.slf4j:slf4j-api:1.7.25'

    implementation 'com.tencent.shadow.core:common'
    implementation 'com.tencent.shadow.dynamic:dynamic-host'
    implementation project(':constant')

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-remote:3.3.0'
    implementation 'androidx.test.espresso:espresso-idling-resource:3.3.0'
    androidTestImplementation "androidx.test:runner:1.3.0"

    implementation project(':plugin-use-host-code-lib')
    implementation project(':test-manager')
    implementation project(':custom-view')
}

def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName) {
    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
    outputFile.getParentFile().mkdirs()
    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn("${projectName}:${taskName}")
}

import groovy.xml.XmlUtil
// 修改xml 文件的内容
def changeText(type){
    def activityXml = "${project(":test-plugin-general-cases").getProjectDir()}"+
            "/src/main/res/layout/layout_activity_lifecycle.xml"
    def activityXmlFile = file(activityXml)
    def layout = new XmlSlurper().parse(activityXmlFile)
    if(type == 0){
        layout.TextView.@'android:tag' = "tv_msg"
        layout.TextView.@'android:text' = "Activity生命周期测试"
    }else{
        layout.TextView.@'android:tag' = "tv"
        layout.TextView.@'android:text' = "reinstall"
    }
    def serialize = XmlUtil.serialize(layout)
    file(activityXml).write(serialize)

    if(type == 0)
        return ""
    else
        return "-reinstall"

}

def generateAssets(generateAssetsTask, buildType) {

    def moduleName = 'test-dynamic-manager'
    def pluginManagerApkFile = file(
            "${project(":test-dynamic-manager").getBuildDir()}" +
                    "/outputs/apk/${buildType}/" +
                    "${moduleName}-${buildType}.apk"
    )
    generateAssetsTask.dependsOn createCopyTask(
            ':test-dynamic-manager',
            buildType,
            moduleName,
            'pluginmanager.apk',
            pluginManagerApkFile,
            "assemble${buildType.capitalize()}"
    )

    def pluginZip = file("${getRootProject().getBuildDir()}/plugin-${buildType}.zip")

    // 如果要测试 ReinstallPluginTest.testReinstallPluginWhenUsed
    // 请 build 2次， 并修改先后 changeText 的参数， 0 代表 正常插件， 1代表 重新安装的插件
    // 如果要测试 ReinstallPluginTestOnly.testReinstallPluginOnly
    // 请 修改 changeText 的参数为 1
    def mod = changeText(1)
    generateAssetsTask.dependsOn createCopyTask(
            ':test-plugin-general-cases',
            buildType,
            "plugin${mod}-zip",
            "plugin${mod}-${buildType}.zip",
            pluginZip,
            "package${buildType.capitalize()}Plugin"
    )


}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        generateAssets(task, 'debug')
    }
}