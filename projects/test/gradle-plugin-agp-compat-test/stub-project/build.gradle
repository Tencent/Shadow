buildscript {
    loadVersions:
    {// 读取versions.properties到ext中，供项目中直接用变量引用版本号
        def versions_properties_path = '../../../../buildScripts/gradle/versions.properties'
        def versions = new Properties()
        versions.load(file(versions_properties_path).newReader())
        versions.forEach { key, stringValue ->
            def value = stringValue?.isInteger() ? stringValue as Integer : stringValue
            ext.set(key, value)
        }
    }
    repositories {
        if (!System.getenv().containsKey("DISABLE_TENCENT_MAVEN_MIRROR")) {
            maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
        } else {
            google()
            mavenCentral()
        }
        mavenLocal()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$TestAGPVersion"
        classpath "com.tencent.shadow.core:gradle-plugin:$ShadowVersion"
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.tencent.shadow.plugin'

allprojects {
    repositories {
        if (!System.getenv().containsKey("DISABLE_TENCENT_MAVEN_MIRROR")) {
            maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
        } else {
            google()
            mavenCentral()
        }
    }
}

ext.disable_shadow_transform = true

android {
    compileSdkVersion COMPILE_SDK_VERSION

    defaultConfig {
        applicationId "com.tencent.shadow.test.gradle.stub_project"
        minSdkVersion MIN_SDK_VERSION
        targetSdkVersion TARGET_SDK_VERSION
        versionCode VERSION_CODE
        versionName VERSION_NAME
    }

    // 测试插件项目存在自定义flavorDimensions
    flavorDimensions(*flavorDimensionList, 'DimensionA', 'DimensionB')
    productFlavors {
        A1 {
            dimension 'DimensionA'
        }
        B2 {
            dimension 'DimensionB'
        }

    }

    // 将插件的资源ID分区改为和宿主0x7F不同的值
    aaptOptions {
        additionalParameters "--package-id", "0x7E", "--allow-reserved-package-id"
    }
}

dependencies {
    //Shadow Transform后业务代码会有一部分实际引用runtime中的类
    //如果不以compileOnly方式依赖，会导致其他Transform或者Proguard找不到这些类
    pluginCompileOnly "com.tencent.shadow.core:runtime:$ShadowVersion"
}

repositories {
    if (!System.getenv().containsKey("DISABLE_TENCENT_MAVEN_MIRROR")) {
        maven { url 'https://mirrors.tencent.com/nexus/repository/maven-public/' }
    } else {
        google()
        mavenCentral()
    }
    mavenLocal()
}